const weather = require("weather-js");
const ProdCalendar = require("prod-cal");
const prodCalendar = new ProdCalendar("ru");

const months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"];
const dayTypes = {
    "work": "—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å ‚öí",
    "work_reduced": "—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å üî®",
    "holiday": "–≤—ã—Ö–æ–¥–Ω–æ–π üë®‚Äçüë©‚Äçüëß"
};

function formatDate(date) {
    let dayType = prodCalendar.getDay(date.getFullYear(), date.getMonth() + 1, date.getDate());
    return [date.getDate(), months[date.getMonth()] + ",", dayTypes[dayType]].join(" ");
}

function getTomorrow(date) {
    let d = new Date();
    Object.assign(d, date);
    d.setDate(d.getDate() + 1);
    return d.toISOString().split("T")[0];
}

function getTemperature(currentRecord) {
    return currentRecord.temperature+ "‚ÑÉ" + ((currentRecord.temperature !== currentRecord.feelslike) ? "(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ " + currentRecord.feelslike + "‚ÑÉ)" : "");
}

function weatherApi(date) {
    return new Promise((resolve, reject) => {
        weather.find({
            search: "Moscow, Russia",
            degreeType: "C",
            lang: "RU"
        }, (err, result) => {
            if (err) {
                reject(err);
            } else {

                let currentRecord = result[0]["current"];
                let forecastRecord = result[0]["forecast"].filter(row => row.date === getTomorrow(date))[0];

                resolve(["<b>–°–µ–≥–æ–¥–Ω—è, " + formatDate(date) + "</b>",
                        ["üå°", getTemperature(currentRecord)].join(" "),
                        ["‚õÖ", currentRecord.skytext].join(" "),
                        ["üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", currentRecord.humidity + "%"].join(" "),
                        ["üå¨ –í–µ—Ç–µ—Ä", currentRecord.winddisplay, ""].join(" "),
                        "",
                        "<b>–ó–∞–≤—Ç—Ä–∞, " + formatDate(new Date(forecastRecord.date)) + "</b>",
                        ["üå° –æ—Ç", forecastRecord.low + "‚ÑÉ", "–¥–æ", forecastRecord.high + "‚ÑÉ"].join(" "),
                        ["‚õÖ", forecastRecord.skytextday].join(" ")
                    ].join("\n")
                );

            }
        });
    });
}

module.exports = weatherApi;