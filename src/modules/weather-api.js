const weather = require("weather-js");
const ProdCalendar = require("prod-cal");
const Calendar = require("../lib/calendar");

let calendar = new Calendar(new ProdCalendar("ru"));

function getTemperature(currentRecord) {
    return currentRecord.temperature + "‚ÑÉ" + ((currentRecord.temperature !== currentRecord.feelslike) ? "(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ " + currentRecord.feelslike + "‚ÑÉ)" : "");
}

function weatherApi(date) {
    return new Promise((resolve, reject) => {
        weather.find({
            search: "Moscow, Russia",
            degreeType: "C",
            lang: "RU"
        }, (err, result) => {
            if (err) {
                reject(err);
                return;
            }

            let currentRecord = result[0]["current"];
            let forecastRecord = result[0]["forecast"].filter((row) => row.date === calendar.getTomorrow(date))[0];

            resolve(["<b>–°–µ–≥–æ–¥–Ω—è, " + calendar.formatDate(date) + "</b>",
                    ["üå°", getTemperature(currentRecord)].join(" "),
                    ["‚õÖ", currentRecord.skytext].join(" "),
                    ["üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", currentRecord.humidity + "%"].join(" "),
                    ["üå¨ –í–µ—Ç–µ—Ä", currentRecord.winddisplay, ""].join(" "),
                    "",
                    "<b>–ó–∞–≤—Ç—Ä–∞, " + calendar.formatDate(new Date(forecastRecord.date)) + "</b>",
                    ["üå° –æ—Ç", forecastRecord.low + "‚ÑÉ", "–¥–æ", forecastRecord.high + "‚ÑÉ"].join(" "),
                    ["‚õÖ", forecastRecord.skytextday].join(" ")
                ].join("\n")
            );

        });
    });
}

module.exports = weatherApi;